#include <stdio.h>
#include <string.h>

void dumpBytes(void *p, int n) {
  int ii;
  char hex[9];
  for(ii = 0; ii < n; ii++) {
    sprintf(hex, "%02x", (char)*((char*)p + ii));
    printf("%s ", hex);
    /*printf("%s ", hex + strlen(hex)-2);printf("\n");*/
  }
  printf("\n");
}

int main(void) 
{
static union job
{
    int a;
    struct data
    {
        double b;
        int x;
    }q;
} w;

// In struct of the above program, there will be padding of 4 bytes after int member to make the structure size multiple of its alignment.
// That's why the size of the union is 16bytes here 
printf("Size of Double : %u\n",sizeof(w.q.b));
printf("Size of Int : %d\n",sizeof(w.q.x));
printf("Size of Structure : %u\n",sizeof(w.q));

printf("Size of Union : %u\n",sizeof(w.q));

printf("Starting Address : %p\n",&w);
printf("intial value: ");
dumpBytes(&w, sizeof(w));


printf("Struct Int w.q.b Address : %p\n",&w.q.b);
printf("Struct Double w.q.b : ");
dumpBytes(&w.q.b, sizeof(w.q.b));

printf("Struct Int w.q.x Address : %p\n",&w.q.x);
printf("Struct Int w.q.x : ");
dumpBytes(&w.q.x, sizeof(w.q.x));

printf("Union w.a Address : %p\n",&w.a);
printf("Union w.a : ");
dumpBytes(&w.a, sizeof(w.a));

w.q.b=7;
printf("setting w.q.b = 7:\n");
dumpBytes(&w, sizeof(w.q.b));

w.a=4;
printf("setting w.a = 4:\n");
dumpBytes(&w, sizeof(w));

w.q.x=5;
printf("setting w.q.x = 5:\n");
dumpBytes(&w, sizeof(w));

printf("values are now %d %d %.15lf\n",w.a,w.q.x,w.q.b);

return 0;
}
